Télécharger des playlists Spotify en qualité FLAC.

Programme qui créé une Pipeline de manière à exploiter intelligemment
le processeur selon son nombre de coeurs accessibles et 
accélerer le processus d'évolution.

De plus, si le processus se voit arrêté avant sa fin, une sauvegarde de
sa forme actuelle sera sauvegardé et le processus pourra redémarrer
là où il s'était arrêté.

Avantage 1 : Pouvoir facilement coder un système visant à faire évoluer une entité
Avantage 2 : On peut arrêter un processus avant sa fin pour le reprendre plus tard
Avantage 3 : On utilise une pipeline qui exploite au maximum le processeur
Avantage 4 : Possibilité de parallèliser les processus avec plusieurs machines sans conflit

Système visant à faire évoluer une entité, des données prenant diverses formes intermédiaires
connues à l'avance.

Programme qui créé une Pipeline de manière à exploiter intelligemment
le processeur selon son nombre de coeurs accessibles et 
accélerer le processus d'évolution.

De plus, si le processus se voit arrêté avant sa fin, une sauvegarde de
sa forme actuelle sera sauvegardé et le processus pourra redémarrer
là où il s'était arrêté.

Faire en sorte que le code soit facile à écrire et facilement extensible / modifiable.


=> Coder une pipeline générique et intelligente pour évolution d'entités.
(Aucun interet d'utiliser un variant à priori ?)

__________________

Pipeline trop compliqué et inutile => dans notre cas si on utilise les variants
alors tous les threads feront le même traitement (evolve d'un param de type variant<..>).

Du coup soit on fait un ThreadPool (pour ne pas perdre de temps à la création de nouveaux threads)
soit une alternative.

Mais dans notre cas on veut avoir autant de threads que de coeurs cpu accessibles et
chaque thread fera le même traitement.
Tous les threads piochent dans la stack commune (la sécuriser avec des lock ou un truc
du genre).

Le process c'est faire évoluer l'objet jusqu'à ce qu'il atteigne sa forme finale puis
l'ajouter à la file résultats.

_____________________________________________

Commencer à coder le thread pool et à réfléchir à comment
utiliser les files, les jobs de thread, etc..
(appel de la méthode evolve, condition de sortie?)

Je veux pas vérifier la moindre condition dans mon code
(pas de boucle et pas de if/switch)

Faire en sorte que lorsque le thread pool est interrompu ça remet
les objets en traitement en haut de la file (dequeue) et ça sauvegarde
tous les éléments de la file dans des fichiers binaires nommées
selon l'index dans la file (0, 1, 2, ...). Appeler la méthode de l'objet
evoluable pour faire la sauvegarde (prend en paramètre le nom du fichier).

Au lancement du thread pool, ça charge les objets interrompus dans 
les fichiers.

Pouvoir mettre des Evoluable de modèles différents dans la file de la
thread pool.
Playlist, sous sa forme finale, va ajouté un ensemble de Musique à 
la file de traitement.

On veut pouvoir mettre le type de données qu'on veut
(par ex. : un non-variant comme un variant).

L'évolution peut conserver le même type tout du long
s'il n'est pas nécessaire de le modifier.

Donc en fait on ferait une classe avec un param template
pour le type des données à faire évoluer, mais
elle implémente quand même l'interface Evoluable
(méthodes evolve et pour la persi).

On va exploiter les variant en sauvegardant les entités
de type variant.
Du coup leur sauvegarde/restauration est très simple 
et le processus est le même quelque soit la forme
de l'entité.
C'est l'évolueur qui se chargera de sauvegarder l'ensemble
des entités en cours de traitement, donc on stocke dans un
fichier un ensemble de variant (ou autre type).

On veut le moins de classes possible, sinon évidemment c'est mieux 
une modélisation plus 'design-patternée' si on veut du gros code.

Faire en sorte que des implémentations par défaut soit disponibles
pour l'insertion et extraction d'un evoluable (virtual mais pas pur)
qui fonctionne du coup en binaire (fichiers plus volumineux car stocke
tout l'objet mais plus pratique pour variant).


On pourrait simplement sauvegarder automatiquement à la fin d'une évolution
comme ça pas besoin d'attendre un signal pour faire la sauvegarde ?
'
 -> NON, car l'Evoluable n'effectue pas de sauvegarde de lui-même,
 il n'est que passif => il peut en revanche être sauvegardé (on définit
 comment insérer/extraire). DONC, on fait l'histoire du signal ou autres..?
 '
  -> DONC en réalité OUI MAIS la sauvegarde automatique sera à faire côté Evolueur
  et non pas depuis l'Evoluable en lui-même.

_______________________________________________________________________

ATTAQUER L'EVOLUEUR

-> Faire un fichier Evolueur.hpp comprenant la définition des classes Evoluable et Evolueur.
-> Faire un fichier Entite.hpp comprenant la définition de la classe Entite héritant de Evoluable.

  Le but de l'Evolueur c'est qu'il puisse à lui-seul faire évoluer n'importe quel type
  d'Evoluable (quelque soit le param de template). Le développeur, pour utiliser mon Evolueur,
  ne doit avoir qu'à spécializer son propre type d'Evoluable (définir son évolution).


Un fichier 'processing' pour les entités qui n'ont pas fini leur évolution et 
un fichier 'completed' pour les autres. On pioche dedans comme dans une stack
(on partage l'index et on accède via le curseur en lecture seule).
L'idée c'est de ne pas avoir à charger un fichier entier sachant qu'on traite les
entités une à une, on veut pouvoir commencer à travailler rapidement.

--------------------------------------------

Il n'y a qu'un seul serveur Redis accessible par les différentes machines de calcul.
'-> A l'heure actuelle pas possible car on utilise des mutex et que les transactions
    Redis ne sont pas thread safe donc inutile de les envisager pour ce cas d'utilisation.

La base 0 est réservé aux inputs (lecture+suppression mutexé et écriture des
entités non terminées).
La base 17 est réservé à l'écriture des outputs (entités en forme finale).
Les bases 1 à 16 sont utilisées pour l'écriture de données temporaires (backup
des formes intermédiaires). Thread 1->base 1, Thread 8 -> base 8, ... Thread 16 -> base 16.
Lorsqu'une machine cesse de travailler, il doit mettre son entité non terminé dans la
base 0 (inputs) pour qu'elles puissent être traitées par une autre machine.


En vrai y'a besoin de hash que les inputs (formes initiales de la base 0) donc
ça pourrait être intéressant de mettre en clé le hash de la valeur et en valeur
la forme au format binaire.


Prochaine étape : 
Lorsque le programme est quitté, faire en sorte qu'au lieu de flush la db on déplace
l'entité vers la base 0 (inputs).
On va faire une méthode statique qu'on appellera lorsqu'on catchera dans le main
un SIGINT ou SIGTERM.

redis :
randomkey pour retourner une clé aléatoire de la base actuelle.
move pour déplacer une clé de la base actuelle vers une base destination.

PB : Je suis obligé de hardcodé l'host et le port dans Evolueur car
la fonction signal de linux/POSIX prend en deuxième argument un pointeur
vers fonction void(*)(int) sauf qu'on peut pas retourner une lambda qui capture
et donc on peut pas accèder aux membres de la classe Evolueur (host et port).
