Télécharger des playlists Spotify en qualité FLAC.

Programme qui créé une Pipeline de manière à exploiter intelligemment
le processeur selon son nombre de coeurs accessibles et 
accélerer le processus d'évolution.

De plus, si le processus se voit arrêté avant sa fin, une sauvegarde de
sa forme actuelle sera sauvegardé et le processus pourra redémarrer
là où il s'était arrêté.

Avantage 1 : Pouvoir facilement coder un système visant à faire évoluer une entité
Avantage 2 : On peut arrêter un processus avant sa fin pour le reprendre plus tard
Avantage 3 : On utilise une pipeline qui exploite au maximum le processeur
Avantage 4 : Possibilité de parallèliser les processus avec plusieurs machines sans conflit

Système visant à faire évoluer une entité, des données prenant diverses formes intermédiaires
connues à l'avance.

Programme qui créé une Pipeline de manière à exploiter intelligemment
le processeur selon son nombre de coeurs accessibles et 
accélerer le processus d'évolution.

De plus, si le processus se voit arrêté avant sa fin, une sauvegarde de
sa forme actuelle sera sauvegardé et le processus pourra redémarrer
là où il s'était arrêté.

Faire en sorte que le code soit facile à écrire et facilement extensible / modifiable.


=> Coder une pipeline générique et intelligente pour évolution d'entités.
(Aucun interet d'utiliser un variant à priori ?)

__________________

Pipeline trop compliqué et inutile => dans notre cas si on utilise les variants
alors tous les threads feront le même traitement (evolve d'un param de type variant<..>).

Du coup soit on fait un ThreadPool (pour ne pas perdre de temps à la création de nouveaux threads)
soit une alternative.

Mais dans notre cas on veut avoir autant de threads que de coeurs cpu accessibles et
chaque thread fera le même traitement.
Tous les threads piochent dans la stack commune (la sécuriser avec des lock ou un truc
du genre).

Le process c'est faire évoluer l'objet jusqu'à ce qu'il atteigne sa forme finale puis
l'ajouter à la file résultats.

_____________________________________________

Commencer à coder le thread pool et à réfléchir à comment
utiliser les files, les jobs de thread, etc..
(appel de la méthode evolve, condition de sortie?)

Je veux pas vérifier la moindre condition dans mon code
(pas de boucle et pas de if/switch)

Faire en sorte que lorsque le thread pool est interrompu ça remet
les objets en traitement en haut de la file (dequeue) et ça sauvegarde
tous les éléments de la file dans des fichiers binaires nommées
selon l'index dans la file (0, 1, 2, ...). Appeler la méthode de l'objet
evoluable pour faire la sauvegarde (prend en paramètre le nom du fichier).

Au lancement du thread pool, ça charge les objets interrompus dans 
les fichiers.

Pouvoir mettre des Evoluable de modèles différents dans la file de la
thread pool.
Playlist, sous sa forme finale, va ajouté un ensemble de Musique à 
la file de traitement.

On veut pouvoir mettre le type de données qu'on veut
(par ex. : un non-variant comme un variant).

L'évolution peut conserver le même type tout du long
s'il n'est pas nécessaire de le modifier.

Donc en fait on ferait une classe avec un param template
pour le type des données à faire évoluer, mais
elle implémente quand même l'interface Evoluable
(méthodes evolve et pour la persi).

On va exploiter les variant en sauvegardant les entités
de type variant.
Du coup leur sauvegarde/restauration est très simple 
et le processus est le même quelque soit la forme
de l'entité.
C'est l'évolueur qui se chargera de sauvegarder l'ensemble
des entités en cours de traitement, donc on stocke dans un
fichier un ensemble de variant (ou autre type).

On veut le moins de classes possible, sinon évidemment c'est mieux 
une modélisation plus 'design-patternée' si on veut du gros code.

A chaque fin de fonction on check si un signal d'interruption a
été envoyé, au quel cas on sauvegarde les entités en cours de traitement
puis on ferme l'appli.

Faire en sorte que des implémentations par défaut soit disponibles
pour l'insertion et extraction d'un evoluable (virtual mais pas pur)
qui fonctionne du coup en binaire (fichiers plus volumineux car stocke
tout l'objet mais plus pratique pour variant).